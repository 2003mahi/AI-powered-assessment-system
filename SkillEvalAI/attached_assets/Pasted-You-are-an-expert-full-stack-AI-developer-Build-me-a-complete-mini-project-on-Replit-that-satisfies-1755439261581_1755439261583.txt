You are an expert full-stack AI developer. Build me a complete mini-project on Replit that satisfies the following assignment requirements:

**Project Title**: AI-Powered Role-Based Assessment & Evaluation System

**Tech Requirements:**
- Frontend: React (Next.js or standard React) + TailwindCSS or Material UI
- Backend: Node.js + Express
- Database: MongoDB (preferred, but allow PostgreSQL option)
- AI: Any LLM (use Hugging Face Inference API free-tier for NLP parsing + question generation + evaluation)
- NLP Parsing: For converting natural language inputs into structured constraints

**Core Features (Three Phases):**

**Phase 1 – Role & Requirements Gathering**
- Build a frontend form where the user specifies:
  * Role (e.g., Frontend Developer, Data Scientist, DevOps Engineer)
  * Tech stack / skills to assess (e.g., React, Node.js, MongoDB)
  * Candidate experience level (1–3 years, 5+ years)
  * Preferred question types (MCQs, coding problems, theory, scenario-based)
  * Duration of the test
  * Natural language refinement input (e.g., "Make it heavy on problem-solving and include at least one system design question")
- Backend should parse + combine structured inputs with NLP parsed text (via Hugging Face model) to create a test blueprint.
- Save blueprint in MongoDB.

**Phase 2 – Dynamic Test Generation**
- Backend uses Hugging Face LLM to:
  * Generate difficulty-adjusted, role-based questions
  * Ensure variety in formats (MCQs, coding problems, short answers, scenario-based)
  * Add metadata (skill tags, difficulty, time estimate)
- Store generated test in the database.
- Frontend: Clean UI to present the generated test questions to the user (responsive design).

**Phase 3 – Test Taking & AI Evaluation**
- User takes the test in the frontend.
- Backend handles:
  * Basic correctness checks for coding questions
  * Sending open-ended responses to AI for evaluation against expected answers
- Generate AI assessment report including:
  * Overall score
  * Per-skill breakdown
  * Strengths & weaknesses
  * Recommendations for improvement
  * Suggested resources
- Display report to the user in a dashboard-style frontend.

**Bonus Features (Optional)**
- Proctoring: Timer + tab-switch detection
- Multi-role support: Save role templates for reuse

**Deliverables:**
- A working full-stack app deployed on Replit
- `frontend/` folder: React + Tailwind/Material UI app
- `backend/` folder: Node.js + Express API with routes for:
  * `/blueprint` – create test blueprint
  * `/generate` – generate test
  * `/evaluate` – evaluate answers
- Database integration (MongoDB via Atlas connection string)
- Environment variable setup for Hugging Face API key
- Example `.env` file
- Instructions in `README.md` for running locally and on Replit

Make sure the code is clean, modular, and production-ready with clear comments. 
